<% if @current_user.present? %>
<h1>Your Albums</h1>
<% end %>



<!-- <div id="container"></div> -->
<script src="https://s3-us-west-2.amazonaws.com/s.cdpn.io/16327/gsap-latest-beta.min.js" charset="utf-8"></script>
<script>
  // const album1 = []
  // const album2 = []
  // const album3 = []

  let album1 = []
  <% @albums[0].images.each do |image| %>
    album1.push("https://res.cloudinary.com/djinkyjyh/image/upload/c_fill,h_360,w_640/"+"<%= image %>")
  <% end %>

  let album2 = []
  <% @albums[1].images.each do |image| %>
    album2.push("https://res.cloudinary.com/djinkyjyh/image/upload/c_fill,h_360,w_640/"+"<%= image %>")
  <% end %>

  let album3 = []
  <% @albums[2].images.each do |image| %>
    album3.push("https://res.cloudinary.com/djinkyjyh/image/upload/c_fill,h_360,w_640/"+"<%= image %>")
  <% end %>

  console.log(album1)
  console.log(album2)
  console.log(album3)





  //Arrays containing the image URLs for each album. To come from server.
  // const album1 = ['http://placekitten.com/480/320',
  //                   'http://placekitten.com/481/320',
  //                   'http://placekitten.com/482/320',
  //                   'http://placekitten.com/483/320',
  //                   'http://placekitten.com/484/320',
  //                   'http://placekitten.com/485/320',
  //                   'http://placekitten.com/486/320',
  //                   'http://placekitten.com/487/320',
  //                   'http://placekitten.com/488/320',
  //                   'http://placekitten.com/489/320',
  //                   'http://placekitten.com/480/321',
  //                   'http://placekitten.com/480/322',
  //                   'http://placekitten.com/480/323',
  //                   'http://placekitten.com/480/324',
  //                   'http://placekitten.com/480/325']
  // const album2 = ['http://placekitten.com/480/320',
  //                   'http://placekitten.com/481/320',
  //                   'http://placekitten.com/482/320',
  //                   'http://placekitten.com/483/320',
  //                   'http://placekitten.com/484/320',
  //                   'http://placekitten.com/485/320',
  //                   'http://placekitten.com/486/320',
  //                   'http://placekitten.com/487/320',
  //                   'http://placekitten.com/488/320',
  //                   'http://placekitten.com/489/320',
  //                   'http://placekitten.com/480/321',
  //                   'http://placekitten.com/480/322',
  //                   'http://placekitten.com/480/323',
  //                   'http://placekitten.com/480/324',
  //                   'http://placekitten.com/480/325']
  // const album3 = ['http://placekitten.com/480/320',
  //                   'http://placekitten.com/481/320',
  //                   'http://placekitten.com/482/320',
  //                   'http://placekitten.com/483/320',
  //                   'http://placekitten.com/484/320',
  //                   'http://placekitten.com/485/320',
  //                   'http://placekitten.com/486/320',
  //                   'http://placekitten.com/487/320',
  //                   'http://placekitten.com/488/320',
  //                   'http://placekitten.com/489/320',
  //                   'http://placekitten.com/480/321',
  //                   'http://placekitten.com/480/322',
  //                   'http://placekitten.com/480/323',
  //                   'http://placekitten.com/480/324',
  //                   'http://placekitten.com/480/325']

  //Create ThreeJS scene
  const scene = new THREE.Scene();






  //Place threeJS scene into a container. TODO: modify to resize dynamically
  const container = document.getElementById("container")
  let containerWidth = window.innerWidth;
  let containerHeight = window.innerHeight;

  //Create camera
  const camera = new THREE.PerspectiveCamera(
    75,
    window.innerWidth/(window.innerHeight-150),
    0.1,
    1000
  );
  // camera position
  camera.position.set( 0, -2, 40 )
  camera.lookAt(0, 0, 0)

  const renderer = new THREE.WebGLRenderer({antialias: true});
  renderer.setClearColor("#e5e5e5");
  renderer.setSize(window.innerWidth,(window.innerHeight-150));
  // renderer.setSize(window.innerWidth,window.innerHeight);
  renderer.shadowMap.enabled = true;

  document.body.appendChild(renderer.domElement);
  // document.body.appendChild(renderer.domElement);
  let canvas = document.querySelector("canvas")
  window.addEventListener('resize', () => {
    canvas = document.querySelector("canvas");
  renderer.setSize(window.innerWidth,(window.innerHeight-150));
  camera.aspect = window.innerWidth / (window.innerHeight-150);
  camera.updateProjectionMatrix();
  })

  //Object arrays contain the objects for each album
  const objects1 = [];
  const objects2 = [];
  const objects3 = [];
  //Arrays containing the stacked positions for each album
  const stack1 = [];
  const stack2 = [];
  const stack3 = [];
  //Array containing the spread positions
  const grid = [];
  //Raycaster and mouse vector for selection
  const raycaster = new THREE.Raycaster();
  const mouse = new THREE.Vector2();
  //Create a wall to place pictures against
  const wallGeometry = new THREE.BoxGeometry (200, 200, 0.1);
  const wallMaterial = new THREE.MeshLambertMaterial({ color : 0x3bb7ff, side: THREE.DoubleSide });
  const wall = new THREE.Mesh(wallGeometry, wallMaterial)
  wall.position.set(0, 0, -1);
  wall.receiveShadow = true;
  scene.add(wall);
  //Create an ambient light TODO: Is this nessecary?
  const ambientLight = new THREE.AmbientLight(0xffffff, 0.4);
  scene.add(ambientLight);
  //Renders the scene
  const render = function() {
    console.log("render")
  requestAnimationFrame(render);
  renderer.render(scene, camera);
  };


  //Loop creates invisible objects in the spread positions
  for(i = 0; i<15;i++) {
    const object = new THREE.Object3D();
    object.position.x = ( (i % 5) * 18 ) - 36;
    object.position.y = - ( Math.floor(i/5) * 12 ) +6;
    object.position.z = 0;
    grid.push( object );
  }
  //Loop creates invisible objects in the stacked positions TODO: investigate
  // generating these loops so we can have any number of albums.
  for(i = 0; i<15;i++) {
    const object = new THREE.Object3D();
    object.position.x = -30;
    object.position.y = 20;
    object.position.z = i * 0.15;
    object.rotation.set(0,0,((Math.random() * 0.4)-0.2));
    stack1.push( object );
  }
  //Loop creates invisible objects in the stacked positions TODO: investigate
  // generating these loops so we can have any number of albums.
  for(i = 0; i<15;i++) {
    const object = new THREE.Object3D();
    object.position.x = 0;
    object.position.y = 20;
    object.position.z = i * 0.15;
    object.rotation.set(0,0,((Math.random() * 0.4)-0.2));
    stack2.push( object );
  }
  //Loop creates invisible objects in the stacked positions TODO: investigate
  // generating these loops so we can have any number of albums.
  for(i = 0; i<15;i++) {
    const object = new THREE.Object3D();
    object.position.x = 30;
    object.position.y = 20;
    object.position.z = i * 0.15;
    object.rotation.set(0,0,((Math.random() * 0.4)-0.2));
    stack3.push( object );
  }

  //Creates the geometry for the pictures
  const pictureGeometry = new THREE.BoxGeometry( 16, 9, 0.3 );
  //Creates the materials with the images for each picture object
  const albumCreate = function(album, objects, stack){
    for( i = 0; i<album.length;i++) {
      const loader = new THREE.TextureLoader();
      const material = new THREE.MeshLambertMaterial({map:loader.load(album[i])
      });
      // Creates the picture objects and adds them to objects.
      const picture = new THREE.Mesh(pictureGeometry, material);
      picture.position.x = stack[i].position.x;
      picture.position.y = stack[i].position.y;
      picture.position.z = stack[i].position.z;
      picture.rotation.set(0,0,((Math.random() * 0.4)-0.2));
      picture.castShadow = true;
      scene.add(picture);
      objects.push( picture );
    };
  }
  //Calls to create each album. TODO: make this work for any number of albums
  albumCreate(album1, objects1, stack1)
  albumCreate(album2, objects2, stack2)
  albumCreate(album3, objects3, stack3)


  //Creates a point light
  const light = new THREE.PointLight( 0xffffff, 1.1, 0 );
  light.position.set(0, 10, 50 );
  light.castShadow = true;
  light.shadow.radius = 8;
  scene.add(light)

  //Camera helper for visualising shadows
  // const cameraHelper = new THREE.CameraHelper(light.shadow.camera);
  // scene.add(cameraHelper);

  //Shadow Camera properties
  light.shadowCameraVisible = true;
  light.shadowDarkness = 0.5;

  //Set up shadow properties for the light
  light.shadow.mapSize.width = 2048; // default
  light.shadow.mapSize.height = 2048; // default
  light.shadow.camera.near = 0.5; // default
  light.shadow.camera.far = 500; // default

  //Find mouse location

  function onMouseMove( event ) {
    // mouse.x = ( event.clientX / window.innerWidth ) * 2 - 1;
    // mouse.y = - ( event.clientY / window.innerHeight ) * 2 + 1;
    mouse.x = ( ( event.clientX - canvas.offsetLeft ) / canvas.clientWidth ) * 2 - 1;
    mouse.y = - ( ( event.clientY - canvas.offsetTop ) / canvas.clientHeight ) * 2 + 1;
    // console.log(mouse.x)
    // console.log(mouse.y)
  }

  //Stores states of albums and objects
  const state = {
    stacked: true,
    zoomed: false,
    zoomReturn: {x: '', y: '',},
    stackReturn: {x: '', y: ''},
    zoomedObject: '',
    unstackedAlbum: '',
  }
  let int1;
  let int2;
  let int3;

  //Function to handle clicks
  function click(event){
    //prevents default action and works out which object is being intersected
    // event.preventDefault();
    onMouseMove(event);
    raycaster.setFromCamera(mouse, camera);
    int1 = raycaster.intersectObjects(objects1);
    int2 = raycaster.intersectObjects(objects2);
    int3 = raycaster.intersectObjects(objects3);
    // console.log(scene.children)
    // console.log(intersected.length)

    //Array of clicked items is searched through to see which is selected
    let clickedItems = [int1, int2, int3]
    let selected
    for (i = 0;i < clickedItems.length; i++) {
      if (clickedItems[i].length > 0) {
        selected = clickedItems[i]
      }
    }
    // console.log(selected)
    // console.log(`stacked ${state.stacked}` )
    // console.log(`zoomed ${state.zoomed}` )


    //if you click on an album, unstack that album & set stacked state false
    //Bug: if you click on the edge, where there are not all images, it only
    // partially unstacks
    if (selected && state.stacked) {
      unstack(selected);
      state.unstackedAlbum = selected;
      state.stackReturn.x = selected[0].object.position.x
      state.stackReturn.y = selected[0].object.position.y
      state.stacked = false;
      // console.log(state.stackReturn)
    }
    //If you click on blank space with an album unstacked, stack it.
    if (!selected && !state.stacked) {
      stack(state.unstackedAlbum);
      state.stacked = true;
    }

    //This handles zoom in and zoom out. It must be an if/else if to work
    if (state.zoomed ) {
      // console.log(state.zoomReturn)
      zoomOut(state.zoomedObject)
      state.zoomed = false;
    } else if (!state.stacked && !state.zoomed && selected.length === 1) {
      zoomIn(selected[0].object)
      state.zoomedObject = (selected[0].object)
      state.zoomReturn.x = (selected[0].object.position.x)
      state.zoomReturn.y = (selected[0].object.position.y)
      state.zoomReturn.z = (selected[0].object.position.z)
      state.zoomed = true;
    }

  }
  //Listen for click and mouse move
  window.addEventListener('click', click, false);
  window.addEventListener('mousemove', onMouseMove, false);

  // Moves selected images to the grid positions
  const unstack = function(selected) {
    // console.log('unstacking')
    for ( i = 0; i < selected.length; i++ ) {
      const picture = selected[i].object
      this.tl = new TimelineMax()
      this.tl.to( picture.rotation, 0.2, {
        x: 0,
        y: 0,
        z: 0
      })
      this.tl.to( picture.position, 0.4, {
        x: grid[i].position.x,
        y: grid[i].position.y,
        z: grid[i].position.z,
        delay: ( i * 0.02 )
      })

    }
  }

  // Returns selected images to their original stacked position
  const stack = function( album ) {
    // console.log( 'stacking' )

    for ( i = 0; i < album.length ; i++ ) {
      const picture = album[i].object
      let rotation = ( Math.random() * 0.4 ) - 0.2
      this.tl = new TimelineMax().delay(0.2)
      this.tl.to(picture.position, 0.4, {
        x: state.stackReturn.x,
        y: state.stackReturn.y,
        z: i * 0.15,
        delay: ((Math.random()*0.4)-0.2)
      })
      this.tl.to(picture.rotation, 0.2, {
        z: rotation
      })
    }
  }

  // Brings a picture up to the camera
  const zoomIn = function(picture) {
    this.tl = new TimelineMax()
    this.tl.to(picture.position, 0.4, {
      x: 0,
      y: -1.5,
      z: 32
    })
  }

  // Puts a picture back to it's grid position
  const zoomOut = function(picture) {
    // console.log('zooming out')
    this.tl = new TimelineMax()
    // console.log(`${toX}, ${toY}, ${toZ}`)
    this.tl.to(picture.position, 0.4, {
      x: state.zoomReturn.x,
      y: state.zoomReturn.y,
      z: 0
    })
  }
  //

  //

  // const tilt = function(event) {
  //   event.preventDefault();
  // 	onMouseMove(event);
  // 	raycaster.setFromCamera(mouse, camera);
  // 	intersected = raycaster.intersectObjects(objects);
  //   if(!state.stacked && !state.zoomed && intersected.length > 0){
  //     this.tl = new TimelineMax()
  //     this.tl.to(intersected[0].object.position, 0.4, {
  //       z: 2,
  //       delay: 0.001
  //     })
  //   } else if (state.zoomed || state.stacked){
  //
  //   } else {
  //     for (i=0;i<objects.length;i++) {
  //
  //       this.tl = new TimelineMax()
  //       this.tl.to(objects[i].position, 0.4, {
  //         x: grid[i].position.x,
  //         y: grid[i].position.y,
  //         z: 0,
  //         delay: 0.001
  //       })
  //     }
  //   }
  // }
  // window.addEventListener('mousemove', tilt, false);

render();


</script>
